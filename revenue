<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pokemon TCG Grading Business Tracker</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #ff6b6b, #feca57);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            margin: 10px 0 0 0;
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }
        
        .tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            cursor: pointer;
            background: #f8f9fa;
            border: none;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .tab.active {
            background: white;
            color: #667eea;
        }
        
        .tab.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 3px;
            background: #667eea;
        }
        
        .tab:hover:not(.active) {
            background: #e9ecef;
        }
        
        .tab-content {
            display: none;
            padding: 30px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .form-section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 30px;
            border: 2px solid #e9ecef;
        }
        
        .form-section h3 {
            margin: 0 0 20px 0;
            color: #495057;
            font-size: 1.4em;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        label {
            font-weight: 600;
            margin-bottom: 5px;
            color: #495057;
        }
        
        input, select {
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 5px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        }
        
        .btn-danger:hover {
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .summary-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }
        
        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .summary-card h4 {
            margin: 0 0 10px 0;
            color: #6c757d;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .summary-card .amount {
            font-size: 2em;
            font-weight: 700;
            margin: 0;
        }
        
        .positive { color: #28a745; }
        .negative { color: #dc3545; }
        .neutral { color: #667eea; }
        
        .data-table {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            border: 2px solid #e9ecef;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th {
            background: #667eea;
            color: white;
            padding: 15px 10px;
            text-align: left;
            font-weight: 600;
        }
        
        td {
            padding: 12px 10px;
            border-bottom: 1px solid #e9ecef;
        }
        
        tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        tr:hover {
            background: #e3f2fd;
        }
        
        .delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .delete-btn:hover {
            background: #c82333;
        }
        
        .export-section {
            margin-top: 30px;
            text-align: center;
            padding: 30px;
            background: #f8f9fa;
            border-radius: 10px;
        }
        
        .icon {
            font-size: 1.2em;
            margin-right: 8px;
        }
        
        @media (max-width: 768px) {
            .tabs {
                flex-direction: column;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .summary-cards {
                grid-template-columns: 1fr;
            }
            
            table {
                font-size: 14px;
            }
            
            th, td {
                padding: 8px 5px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸŽ´ Pokemon TCG Grading Tracker</h1>
            <p>Track your revenue, expenses, and profits like a Pokemon Master</p>
        </div>
        
        <div class="tabs">
            <button class="tab active" onclick="showTab('revenue')">ðŸ’° Revenue</button>
            <button class="tab" onclick="showTab('expenses')">ðŸ’¸ Expenses</button>
            <button class="tab" onclick="showTab('dashboard')">ðŸ“Š Dashboard</button>
            <button class="tab" onclick="showTab('export')">ðŸ“¥ Export</button>
        </div>
        
        <div id="revenue" class="tab-content active">
            <div class="form-section">
                <h3><span class="icon">ðŸ’°</span>Add Revenue Entry</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="rev-date">Date</label>
                        <input type="date" id="rev-date" required>
                    </div>
                    <div class="form-group">
                        <label for="rev-type">Revenue Type</label>
                        <select id="rev-type" required>
                            <option value="">Select Type</option>
                            <option value="Card Sales">Card Sales</option>
                            <option value="Grading Services">Grading Services</option>
                            <option value="Consultation">Consultation</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="rev-description">Description</label>
                        <input type="text" id="rev-description" placeholder="e.g., Charizard Base Set sale" required>
                    </div>
                    <div class="form-group">
                        <label for="rev-amount">Amount ($)</label>
                        <input type="number" id="rev-amount" step="0.01" placeholder="0.00" required>
                    </div>
                </div>
                <button class="btn" onclick="addRevenue()">Add Revenue</button>
            </div>
            
            <div class="data-table">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="revenue-table">
                        <!-- Revenue entries will be added here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div id="expenses" class="tab-content">
            <div class="form-section">
                <h3><span class="icon">ðŸ’¸</span>Add Expense Entry</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="exp-date">Date</label>
                        <input type="date" id="exp-date" required>
                    </div>
                    <div class="form-group">
                        <label for="exp-category">Category</label>
                        <select id="exp-category" required>
                            <option value="">Select Category</option>
                            <option value="Card Purchases">Card Purchases</option>
                            <option value="Grading Fees">Grading Fees (PSA/BGS/CGC)</option>
                            <option value="Shipping Supplies">Shipping Supplies</option>
                            <option value="Storage Supplies">Storage Supplies (Toploaders, Sleeves)</option>
                            <option value="Packaging Materials">Packaging Materials</option>
                            <option value="Platform Fees">Platform Fees (eBay, COMC)</option>
                            <option value="Shipping Costs">Shipping Costs</option>
                            <option value="Office Supplies">Office Supplies</option>
                            <option value="Marketing">Marketing</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="exp-description">Description</label>
                        <input type="text" id="exp-description" placeholder="e.g., PSA grading submission" required>
                    </div>
                    <div class="form-group">
                        <label for="exp-amount">Amount ($)</label>
                        <input type="number" id="exp-amount" step="0.01" placeholder="0.00" required>
                    </div>
                </div>
                <button class="btn" onclick="addExpense()">Add Expense</button>
            </div>
            
            <div class="data-table">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Category</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="expense-table">
                        <!-- Expense entries will be added here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div id="dashboard" class="tab-content">
            <div class="summary-cards">
                <div class="summary-card">
                    <h4>Total Revenue</h4>
                    <p class="amount positive" id="total-revenue">$0.00</p>
                </div>
                <div class="summary-card">
                    <h4>Total Expenses</h4>
                    <p class="amount negative" id="total-expenses">$0.00</p>
                </div>
                <div class="summary-card">
                    <h4>Net Profit</h4>
                    <p class="amount neutral" id="net-profit">$0.00</p>
                </div>
                <div class="summary-card">
                    <h4>Profit Margin</h4>
                    <p class="amount neutral" id="profit-margin">0%</p>
                </div>
            </div>
            
            <div class="form-section">
                <h3><span class="icon">ðŸ“…</span>Monthly Breakdown</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="month-filter">Select Month</label>
                        <select id="month-filter" onchange="updateMonthlyView()">
                            <option value="">All Time</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="summary-cards" id="monthly-summary">
                <div class="summary-card">
                    <h4>Monthly Revenue</h4>
                    <p class="amount positive" id="monthly-revenue">$0.00</p>
                </div>
                <div class="summary-card">
                    <h4>Monthly Expenses</h4>
                    <p class="amount negative" id="monthly-expenses">$0.00</p>
                </div>
                <div class="summary-card">
                    <h4>Monthly Profit</h4>
                    <p class="amount neutral" id="monthly-profit">$0.00</p>
                </div>
            </div>
            
            <div class="data-table">
                <h3>Top Expense Categories</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Total Amount</th>
                            <th>Percentage of Total</th>
                        </tr>
                    </thead>
                    <tbody id="expense-breakdown">
                        <!-- Expense breakdown will be added here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div id="export" class="tab-content">
            <div class="export-section">
                <h3><span class="icon">ðŸ“¥</span>Export Your Data</h3>
                <p>Download your financial data for external analysis or backup purposes.</p>
                <button class="btn" onclick="exportToCSV()">Download CSV Report</button>
                <button class="btn" onclick="printReport()">Print Report</button>
                <div style="margin-top: 20px;">
                    <h4>Import Data</h4>
                    <input type="file" id="import-file" accept=".json" style="margin: 10px 0;">
                    <button class="btn" onclick="importData()">Import Data</button>
                    <button class="btn btn-danger" onclick="clearAllData()">Clear All Data</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Data storage
        let revenueData = JSON.parse(localStorage.getItem('pokemon-revenue') || '[]');
        let expenseData = JSON.parse(localStorage.getItem('pokemon-expenses') || '[]');
        
        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            // Set default dates to today
            document.getElementById('rev-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('exp-date').value = new Date().toISOString().split('T')[0];
            
            updateTables();
            updateDashboard();
            populateMonthFilter();
        });
        
        // Tab functionality
        function showTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all tabs
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to selected tab
            event.target.classList.add('active');
            
            if (tabName === 'dashboard') {
                updateDashboard();
            }
        }
        
        // Add revenue entry
        function addRevenue() {
            const date = document.getElementById('rev-date').value;
            const type = document.getElementById('rev-type').value;
            const description = document.getElementById('rev-description').value;
            const amount = parseFloat(document.getElementById('rev-amount').value);
            
            if (!date || !type || !description || isNaN(amount)) {
                alert('Please fill in all fields');
                return;
            }
            
            const entry = {
                id: Date.now(),
                date,
                type,
                description,
                amount
            };
            
            revenueData.push(entry);
            localStorage.setItem('pokemon-revenue', JSON.stringify(revenueData));
            
            // Clear form
            document.getElementById('rev-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('rev-type').value = '';
            document.getElementById('rev-description').value = '';
            document.getElementById('rev-amount').value = '';
            
            updateTables();
            updateDashboard();
            populateMonthFilter();
        }
        
        // Add expense entry
        function addExpense() {
            const date = document.getElementById('exp-date').value;
            const category = document.getElementById('exp-category').value;
            const description = document.getElementById('exp-description').value;
            const amount = parseFloat(document.getElementById('exp-amount').value);
            
            if (!date || !category || !description || isNaN(amount)) {
                alert('Please fill in all fields');
                return;
            }
            
            const entry = {
                id: Date.now(),
                date,
                category,
                description,
                amount
            };
            
            expenseData.push(entry);
            localStorage.setItem('pokemon-expenses', JSON.stringify(expenseData));
            
            // Clear form
            document.getElementById('exp-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('exp-category').value = '';
            document.getElementById('exp-description').value = '';
            document.getElementById('exp-amount').value = '';
            
            updateTables();
            updateDashboard();
            populateMonthFilter();
        }
        
        // Delete entry
        function deleteRevenue(id) {
            if (confirm('Are you sure you want to delete this revenue entry?')) {
                revenueData = revenueData.filter(entry => entry.id !== id);
                localStorage.setItem('pokemon-revenue', JSON.stringify(revenueData));
                updateTables();
                updateDashboard();
            }
        }
        
        function deleteExpense(id) {
            if (confirm('Are you sure you want to delete this expense entry?')) {
                expenseData = expenseData.filter(entry => entry.id !== id);
                localStorage.setItem('pokemon-expenses', JSON.stringify(expenseData));
                updateTables();
                updateDashboard();
            }
        }
        
        // Update tables
        function updateTables() {
            updateRevenueTable();
            updateExpenseTable();
        }
        
        function updateRevenueTable() {
            const tbody = document.getElementById('revenue-table');
            tbody.innerHTML = '';
            
            // Sort by date (newest first)
            const sortedRevenue = [...revenueData].sort((a, b) => new Date(b.date) - new Date(a.date));
            
            sortedRevenue.forEach(entry => {
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${new Date(entry.date).toLocaleDateString()}</td>
                    <td>${entry.type}</td>
                    <td>${entry.description}</td>
                    <td class="positive">$${entry.amount.toFixed(2)}</td>
                    <td><button class="delete-btn" onclick="deleteRevenue(${entry.id})">Delete</button></td>
                `;
            });
        }
        
        function updateExpenseTable() {
            const tbody = document.getElementById('expense-table');
            tbody.innerHTML = '';
            
            // Sort by date (newest first)
            const sortedExpenses = [...expenseData].sort((a, b) => new Date(b.date) - new Date(a.date));
            
            sortedExpenses.forEach(entry => {
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${new Date(entry.date).toLocaleDateString()}</td>
                    <td>${entry.category}</td>
                    <td>${entry.description}</td>
                    <td class="negative">$${entry.amount.toFixed(2)}</td>
                    <td><button class="delete-btn" onclick="deleteExpense(${entry.id})">Delete</button></td>
                `;
            });
        }
        
        // Update dashboard
        function updateDashboard() {
            const totalRevenue = revenueData.reduce((sum, entry) => sum + entry.amount, 0);
            const totalExpenses = expenseData.reduce((sum, entry) => sum + entry.amount, 0);
            const netProfit = totalRevenue - totalExpenses;
            const profitMargin = totalRevenue > 0 ? (netProfit / totalRevenue * 100) : 0;
            
            document.getElementById('total-revenue').textContent = `$${totalRevenue.toFixed(2)}`;
            document.getElementById('total-expenses').textContent = `$${totalExpenses.toFixed(2)}`;
            document.getElementById('net-profit').textContent = `$${netProfit.toFixed(2)}`;
            document.getElementById('profit-margin').textContent = `${profitMargin.toFixed(1)}%`;
            
            // Update profit color
            const profitElement = document.getElementById('net-profit');
            profitElement.className = `amount ${netProfit >= 0 ? 'positive' : 'negative'}`;
            
            const marginElement = document.getElementById('profit-margin');
            marginElement.className = `amount ${profitMargin >= 0 ? 'positive' : 'negative'}`;
            
            updateExpenseBreakdown();
        }
        
        // Populate month filter
        function populateMonthFilter() {
            const monthFilter = document.getElementById('month-filter');
            const months = new Set();
            
            [...revenueData, ...expenseData].forEach(entry => {
                const monthYear = entry.date.substring(0, 7); // YYYY-MM
                months.add(monthYear);
            });
            
            // Clear existing options except "All Time"
            monthFilter.innerHTML = '<option value="">All Time</option>';
            
            // Sort months and add to select
            [...months].sort().reverse().forEach(month => {
                const option = document.createElement('option');
                option.value = month;
                option.textContent = new Date(month + '-01').toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long' 
                });
                monthFilter.appendChild(option);
            });
        }
        
        // Update monthly view
        function updateMonthlyView() {
            const selectedMonth = document.getElementById('month-filter').value;
            
            let filteredRevenue = revenueData;
            let filteredExpenses = expenseData;
            
            if (selectedMonth) {
                filteredRevenue = revenueData.filter(entry => entry.date.startsWith(selectedMonth));
                filteredExpenses = expenseData.filter(entry => entry.date.startsWith(selectedMonth));
            }
            
            const monthlyRevenue = filteredRevenue.reduce((sum, entry) => sum + entry.amount, 0);
            const monthlyExpenses = filteredExpenses.reduce((sum, entry) => sum + entry.amount, 0);
            const monthlyProfit = monthlyRevenue - monthlyExpenses;
            
            document.getElementById('monthly-revenue').textContent = `$${monthlyRevenue.toFixed(2)}`;
            document.getElementById('monthly-expenses').textContent = `$${monthlyExpenses.toFixed(2)}`;
            document.getElementById('monthly-profit').textContent = `$${monthlyProfit.toFixed(2)}`;
            
            // Update profit color
            const monthlyProfitElement = document.getElementById('monthly-profit');
            monthlyProfitElement.className = `amount ${monthlyProfit >= 0 ? 'positive' : 'negative'}`;
        }
        
        // Update expense breakdown
        function updateExpenseBreakdown() {
            const breakdown = {};
            const totalExpenses = expenseData.reduce((sum, entry) => sum + entry.amount, 0);
            
            expenseData.forEach(entry => {
                if (!breakdown[entry.category]) {
                    breakdown[entry.category] = 0;
                }
                breakdown[entry.category] += entry.amount;
            });
            
            const tbody = document.getElementById('expense-breakdown');
            tbody.innerHTML = '';
            
            // Sort by amount (highest first)
            const sortedBreakdown = Object.entries(breakdown).sort((a, b) => b[1] - a[1]);
            
            sortedBreakdown.forEach(([category, amount]) => {
                const percentage = totalExpenses > 0 ? (amount / totalExpenses * 100) : 0;
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${category}</td>
                    <td class="negative">$${amount.toFixed(2)}</td>
                    <td>${percentage.toFixed(1)}%</td>
                `;
            });
        }
        
        // Export functions
        function exportToCSV() {
            let csv = 'Type,Date,Category/Type,Description,Amount\n';
            
            revenueData.forEach(entry => {
                csv += `Revenue,${entry.date},${entry.type},"${entry.description}",${entry.amount}\n`;
            });
            
            expenseData.forEach(entry => {
                csv += `Expense,${entry.date},${entry.category},"${entry.description}",${entry.amount}\n`;
            });
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `pokemon-tcg-finances-${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }
        
        function printReport() {
            window.print();
        }
        
        function importData() {
            const file = document.getElementById('import-file').files[0];
            if (!file) {
                alert('Please select a file to import');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    if (data.revenue && data.expenses) {
                        revenueData = data.revenue;
                        expenseData = data.expenses;
                        localStorage.setItem('pokemon-revenue', JSON.stringify(revenueData));
                        localStorage.setItem('pokemon-expenses', JSON.stringify(expenseData));
                        updateTables();
                        updateDashboard();
                        populateMonthFilter();
                        alert('Data imported successfully!');
                    } else {
                        alert('Invalid file format');
                    }
                } catch (error) {
                    alert('Error reading file: ' + error.message);
                }
            };
            reader.readAsText(file);
        }
        
        function clearAllData() {
            if (confirm('Are you sure you want to clear ALL data? This cannot be undone!')) {
                revenueData = [];
                expenseData = [];
                localStorage.removeItem('pokemon-revenue');
                localStorage.removeItem('pokemon-expenses');
                updateTables();
                updateDashboard();
                populateMonthFilter();
                alert('All data cleared successfully!');
            }
        }
        
        // Auto-save backup
        setInterval(() => {
            const backup = {
                revenue: revenueData,
                expenses: expenseData,
                timestamp: new Date().toISOString()
            };
            localStorage.setItem('pokemon-backup', JSON.stringify(backup));
        }, 300000); // Save backup every 5 minutes
    </script>
</body>
</html>
